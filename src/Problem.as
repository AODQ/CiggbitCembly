package {
public class Problem {
  public var name : String,
             description : String;
  public var input  : Array,
             output : Array;
  public var input_it  : int,
             output_it : int;
  public var lrange : int,
             urange : int;
  private var func : Function;
  public var level : int;
  public static var tot_levels : int;
  public var custom : Boolean;
  public function Problem(_name : String, _description : String,
                          _func : Function, _lrange : int = -9999,
                          _urange : int = 9999, _custom : Boolean = false) {
    name        = _name;
    description = _description;
    urange = _urange;
    lrange = _lrange;
    func = _func;
    output_it = 0;
    input_it  = 0;
    custom = _custom;
    output = new Array();
    input  = new Array();
    
    Refresh_Problem();
    // -- get level --
    level = tot_levels ++;
  }
  
  public function Refresh_Problem() : void {
    input = new Array();
    output = new Array();
    var len : int = 250;
    if ( custom )
      len = 500;
    for ( var i : int = 0; i != len; ++ i )
      input.push(int(
          (Math.random() * (urange - lrange) + lrange)));
    // if not custom, we have no function (yet)
    if ( !custom )
      output = func(input);
    trace(name);
    trace(input + '\n');
  }


  // --- problem data -----------------------------------------------------
  static public var problem_set : Array;
  private static function Duplication (in_arr : Array) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(_in+1);
    }
    in_arr.push(747,-843,947,444,-782,703,-354,-922,216,529,-147,-642,-876,-953,93,-546,630,-554,-747,-858,-559,-800,-618,-507,987,770,-224,-172,910,738,960,618,367,-896,690,131,-39,474,-83,-566,226,-295,291,-688,387,597,784,-854,139,-810,228,228,91,-528,-288,-828,-858,-542,368,973,156,-928,-697,-54,692,-684,-896,-465,-108,249,-42,296,366,-930,-651,40,603,-205,-754,268,-538,-420,-821,424,329,893,-725,-448,267,-25,-653,542,991,-9,-994,-353,-146,237,-315,973,-429,-272,-976,754,-539,855,-58,-315,-843,-82,634,-459,103,-246,-968,-182,165,-58,-42,-879,145,85,-853,-193,143,858,-35,-123,856,708,47,-713,-539,887,-931,4,43,406,-608,-38,142,-917,-507,-741,-330,692,-16,-424,140,-531,-887,-890,542,-95,338,8,514,882,-482,-221,-786,778,795,-660,-512,-778,-70,863,143,795,612,513,-796,62,-892,708,320,-27,370,399,-393,-882,832,-488,702,595,951,489,-964,67,-643,-137,863,-996,-347,57,-29,569,-755,-271,-217,638,521,210,279,-826,409,872,75,105,-551,760,749,-857,-282,69,-480,438,550,586,205,597,-463,-124,-647,-142,-686,-259,824,-328,-303,-235,-238,608,-728,329,-616,-462,750,-810,405,652,-771,597,-919,803,444,-822,-112,-485);
    out.push(748,-842,948,445,-781,704,-353,-921,217,530,-146,-641,-875,-952,94,-545,631,-553,-746,-857,-558,-799,-617,-506,988,771,-223,-171,911,739,961,619,368,-895,691,132,-38,475,-82,-565,227,-294,292,-687,388,598,785,-853,140,-809,229,229,92,-527,-287,-827,-857,-541,369,974,157,-927,-696,-53,693,-683,-895,-464,-107,250,-41,297,367,-929,-650,41,604,-204,-753,269,-537,-419,-820,425,330,894,-724,-447,268,-24,-652,543,992,-8,-993,-352,-145,238,-314,974,-428,-271,-975,755,-538,856,-57,-314,-842,-81,635,-458,104,-245,-967,-181,166,-57,-41,-878,146,86,-852,-192,144,859,-34,-122,857,709,48,-712,-538,888,-930,5,44,407,-607,-37,143,-916,-506,-740,-329,693,-15,-423,141,-530,-886,-889,543,-94,339,9,515,883,-481,-220,-785,779,796,-659,-511,-777,-69,864,144,796,613,514,-795,63,-891,709,321,-26,371,400,-392,-881,833,-487,703,596,952,490,-963,68,-642,-136,864,-995,-346,58,-28,570,-754,-270,-216,639,522,211,280,-825,410,873,76,106,-550,761,750,-856,-281,70,-479,439,551,587,206,598,-462,-123,-646,-141,-685,-258,825,-327,-302,-234,-237,609,-727,330,-615,-461,751,-809,406,653,-770,598,-918,804,445,-821,-111,-484);
    return out;
  }
  private static function Duplication_II (in_arr : Array ) : Array {
    var out : Array = new Array;
    var count : int = 0;
    in_arr.push(-468,-744,-194,-576,315,391,-872,-153,-956,793,302,-406,-167,-975,-971,183,610,-5,353,-788,219,-435,433,-706,436,-334,311,717,72,-251,-446,264,514,740,266,-64,-918,690,-662,616,-88,836,-985,-862,401,18,243,-758,0,-3,-695,-24,-733,-432,-128,-979,-856,63,413,-566,-19,680,861,65,434,-239,-270,-678,-259,-566,593,-528,-936,-975,944,-593,484,490,712,360,-213,-5,-757,-166,-137,-216,699,-336,-570,575,233,356,-291,544,-773,478,-603,-560,-304,-252,-942,61,435,48,-189,598,-6,348,796,-68,-668,-911,-642,-489,124,-451,-940,-846,-818,-626,694,-584,-290,225,930,-81,-387,70,889,667,-332,-313,991,-669,962,-71,-87,33,-214,144,478,256,-837,58,-869,-276,-753,476,-256,-748,-420,-421,926,310,-64,74,861,-746,619,643,858,-382,757,177,-402,-337,-373,-833,77,494,-807,928,-801,-959,-915,870,718,-59,-995,-498,-518,882,-79,-226,-888,435,711,-63,-533,-669,644,-599,-497,470,-43,622,-802,834,229,23,679,221,-964,291,557,-803,588,343,-745,661,-743,922,355,-525,-656,-435,311,-358,481,-130,546,-690,659,-786,20,973,398,-615,-364,-2,-263,-561,680,-735,416,616,-976,-222,-763,-654,248,-768,533,770,-630,-689,-826,747,451,322);
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      count += in_arr[i];
      out.push(count);
    }
    return out;
  }
  private static function Duplication_III ( in_arr : Array ) : Array {
    var out : Array = new Array;
    var count : int = 0;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      out.push ( int(-Math.abs(in_arr[i])) );
    }
    in_arr.push(955,916,-297,-102,843,784,-796,775,979,-485,-5,577,885,-43,862,-44,19,252,-11,-9,734,-857,510,323,-449,-555,800,647,-878,-931,-870,864,745,625,-547,8,633,93,812,484,-299,127,-295,-964,3,-138,18,-830,34,278,679,575,218,433,610,231,-935,642,-721,578,473,147,-859,681,-135,609,-739,-790,998,725,-130,152,-404,974,-895,472,-170,509,139,-350,-237,-78,547,-465,-832,-492,-726,127,-833,551,618,259,-571,-365,-57,-745,325,921,688,728,-614,-344,374,793,883,-661,744,236,-936,86,-237,995,591,-449,-615,28,579,317,-982,230,323,651,676,-988,589,-874,-391,783,-269,19,-879,261,526,367,-923,-635,-264,300,-894,-533,-275,-634,-437,428,-258,343,884,333,162,-290,-773,629,782,-35,321,-296,333,324,140,633,-106,-567,71,996,-963,-17,-244,-792,163,-214,-136,993,-106,-509,-240,-565,-570,443,-621,731,-907,873,211,-397,-226,-88,951,62,382,881,-195,-547,225,-284,633,638,-130,213,-126,-409,-819,-781,403,-403,-535,887,630,539,815,-174,686,-991,811,-608,694,168,947,-915,-79,-107,-12,798,939,410,-541,915,-574,-236,-699,49,822,-24,-305,-366,-584,-140,521,-432,716,704,-949,-149,872,-713,355,295,252,-155,-443,-478);
    out.push(-955,-916,-297,-102,-843,-784,-796,-775,-979,-485,-5,-577,-885,-43,-862,-44,-19,-252,-11,-9,-734,-857,-510,-323,-449,-555,-800,-647,-878,-931,-870,-864,-745,-625,-547,-8,-633,-93,-812,-484,-299,-127,-295,-964,-3,-138,-18,-830,-34,-278,-679,-575,-218,-433,-610,-231,-935,-642,-721,-578,-473,-147,-859,-681,-135,-609,-739,-790,-998,-725,-130,-152,-404,-974,-895,-472,-170,-509,-139,-350,-237,-78,-547,-465,-832,-492,-726,-127,-833,-551,-618,-259,-571,-365,-57,-745,-325,-921,-688,-728,-614,-344,-374,-793,-883,-661,-744,-236,-936,-86,-237,-995,-591,-449,-615,-28,-579,-317,-982,-230,-323,-651,-676,-988,-589,-874,-391,-783,-269,-19,-879,-261,-526,-367,-923,-635,-264,-300,-894,-533,-275,-634,-437,-428,-258,-343,-884,-333,-162,-290,-773,-629,-782,-35,-321,-296,-333,-324,-140,-633,-106,-567,-71,-996,-963,-17,-244,-792,-163,-214,-136,-993,-106,-509,-240,-565,-570,-443,-621,-731,-907,-873,-211,-397,-226,-88,-951,-62,-382,-881,-195,-547,-225,-284,-633,-638,-130,-213,-126,-409,-819,-781,-403,-403,-535,-887,-630,-539,-815,-174,-686,-991,-811,-608,-694,-168,-947,-915,-79,-107,-12,-798,-939,-410,-541,-915,-574,-236,-699,-49,-822,-24,-305,-366,-584,-140,-521,-432,-716,-704,-949,-149,-872,-713,-355,-295,-252,-155,-443,-478);
    return out;
  }
  private static function Math_Ops (in_arr : Array) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(_in*2);
    }
    in_arr.push(-478,-48,-570,-748,580,171,288,-387,970,-133,-691,424,-378,-869,762,879,-677,561,928,857,985,-373,125,-939,-53,-589,354,928,326,389,307,-554,491,195,-568,161,-662,108,580,-130,79,780,990,884,-963,930,772,30,713,928,278,-778,835,-172,-773,762,46,-35,538,32,510,-253,358,-489,681,-651,-321,-437,-720,609,-5,-984,-165,-427,260,249,-124,-730,-269,-901,958,-26,-927,-420,838,220,-680,-519,183,872,730,-941,186,-833,-18,-251,607,240,-571,-916,-582,765,756,322,367,543,-408,781,825,774,741,-651,865,575,-810,-493,-974,119,723,403,279,163,787,-559,239,-48,-298,-903,-270,835,72,-772,-60,363,715,369,-348,973,-886,293,-579,-634,206,-804,956,665,-948,-69,-171,961,-702,685,-563,285,316,337,737,-267,462,-290,-228,858,314,-204,-854,-386,-486,166,-840,-366,-940,499,700,-117,-184,395,256,348,611,-710,299,13,134,667,-911,-645,757,-430,-616,-46,-70,-789,-276,360,-347,324,-872,-848,-272,456,855,394,974,299,696,-304,325,-168,511,-527,809,-748,729,722,-144,140,523,-692,36,-125,168,-721,19,-230,165,983,179,-280,-57,144,790,256,-713,501,-664,50,-842,891,-853,896,-673,940,-156,-356,919,951,296,968,-129,717);
    out.push(   -956,-96,-1140,-1496,1160,342,576,-774,1940,-266,-1382,848,-756,-1738,1524,1758,-1354,1122,1856,1714,1970,-746,250,-1878,-106,-1178,708,1856,652,778,614,-1108,982,390,-1136,322,-1324,216,1160,-260,158,1560,1980,1768,-1926,1860,1544,60,1426,1856,556,-1556,1670,-344,-1546,1524,92,-70,1076,64,1020,-506,716,-978,1362,-1302,-642,-874,-1440,1218,-10,-1968,-330,-854,520,498,-248,-1460,-538,-1802,1916,-52,-1854,-840,1676,440,-1360,-1038,366,1744,1460,-1882,372,-1666,-36,-502,1214,480,-1142,-1832,-1164,1530,1512,644,734,1086,-816,1562,1650,1548,1482,-1302,1730,1150,-1620,-986,-1948,238,1446,806,558,326,1574,-1118,478,-96,-596,-1806,-540,1670,144,-1544,-120,726,1430,738,-696,1946,-1772,586,-1158,-1268,412,-1608,1912,1330,-1896,-138,-342,1922,-1404,1370,-1126,570,632,674,1474,-534,924,-580,-456,1716,628,-408,-1708,-772,-972,332,-1680,-732,-1880,998,1400,-234,-368,790,512,696,1222,-1420,598,26,268,1334,-1822,-1290,1514,-860,-1232,-92,-140,-1578,-552,720,-694,648,-1744,-1696,-544,912,1710,788,1948,598,1392,-608,650,-336,1022,-1054,1618,-1496,1458,1444,-288,280,1046,-1384,72,-250,336,-1442,38,-460,330,1966,358,-560,-114,288,1580,512,-1426,1002,-1328,100,-1684,1782,-1706,1792,-1346,1880,-312,-712,1838,1902,592,1936,-258,1434);
    return out;
  }
  private static function Branching ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      if ( _in < 0 ) --_in;
      else           ++_in;
      out.push(_in);
    }
    in_arr.push(0,-790,-406,894,152,-562,531,49,-138,151,-806,850,385,720,-823,-129,-965,-583,-874,853,770,52,282,302,700,-906,309,-938,-526,733,442,-537,-628,-551,747,-458,-132,369,23,909,-11,-635,-843,-536,630,-434,-477,486,-282,852,669,360,-540,856,-246,-816,-546,-349,-511,-165,853,861,279,929,32,-781,-141,-105,-12,684,-630,343,-488,37,-327,818,718,-129,-206,-413,-349,-734,396,-268,-302,935,-639,39,-524,429,-34,604,585,796,-188,-867,19,-750,467,814,930,-908,911,72,-12,-578,-414,954,-672,-991,964,-802,619,-524,-755,-421,541,-80,-110,64,-691,517,-349,167,645,60,873,-598,599,-42,925,542,284,-972,-793,781,-197,-587,137,702,-777,-780,7,854,-265,-450,-273,997,443,-802,-256,-989,640,85,514,-607,765,946,-242,555,93,-717,938,865,684,-350,365,-432,-24,717,918,445,-113,648,931,210,252,164,-963,239,-887,-15,582,-366,708,954,-44,266,-700,365,44,-741,528,794,987,356,142,-239,708,-4,386,-980,762,-781,540,-599,-893,-83,-177,573,892,92,487,-300,442,325,110,296,759,-401,-977,493,-571,348,708,676,-14,-257,686,-607,-90,-49,-624,981,-813,-630,-414,-177,127,-727,345,448,45,-243,-384,599,-939,-979,610,520);
    out.push(1,-791,-407,895,153,-563,532,50,-139,152,-807,851,386,721,-824,-130,-966,-584,-875,854,771,53,283,303,701,-907,310,-939,-527,734,443,-538,-629,-552,748,-459,-133,370,24,910,-12,-636,-844,-537,631,-435,-478,487,-283,853,670,361,-541,857,-247,-817,-547,-350,-512,-166,854,862,280,930,33,-782,-142,-106,-13,685,-631,344,-489,38,-328,819,719,-130,-207,-414,-350,-735,397,-269,-303,936,-640,40,-525,430,-35,605,586,797,-189,-868,20,-751,468,815,931,-909,912,73,-13,-579,-415,955,-673,-992,965,-803,620,-525,-756,-422,542,-81,-111,65,-692,518,-350,168,646,61,874,-599,600,-43,926,543,285,-973,-794,782,-198,-588,138,703,-778,-781,8,855,-266,-451,-274,998,444,-803,-257,-990,641,86,515,-608,766,947,-243,556,94,-718,939,866,685,-351,366,-433,-25,718,919,446,-114,649,932,211,253,165,-964,240,-888,-16,583,-367,709,955,-45,267,-701,366,45,-742,529,795,988,357,143,-240,709,-5,387,-981,763,-782,541,-600,-894,-84,-178,574,893,93,488,-301,443,326,111,297,760,-402,-978,494,-572,349,709,677,-15,-258,687,-608,-91,-50,-625,982,-814,-631,-415,-178,128,-728,346,449,46,-244,-385,600,-940,-980,611,521);
    return out;
  }
  private static function Branching_II ( in_arr : Array ) : Array {
    var out : Array = new Array;
    var t2 : int = in_arr[0];
    in_arr.push(124,-462,519,673,-772,-686,-283,367,-757,-688,-140,-439,-636,-985,-525,694,758,-160,-237,-806,-847,957,52,309,628,267,723,9,415,-898,-468,-599,496,219,164,-64,387,-975,27,-791,-420,-230,-642,-570,-229,737,718,-992,960,-822,60,884,253,-9,-115,167,-918,390,429,708,868,-552,739,-80,140,308,-749,152,-140,-440,7,452,795,-526,-620,211,636,821,716,34,-136,-859,-71,135,-123,878,-753,-751,-541,725,-11,900,-833,925,-100,-376,388,-777,-696,-488,-976,-835,-301,-570,401,885,-3,-584,-557,-326,-844,696,937,254,431,821,-318,-162,-160,-399,-156,955,-246,-805,917,575,1,-6,227,216,-428,-328,-364,-864,777,771,-688,-646,-527,-383,-839,607,-677,-138,699,-355,-674,-427,496,-964,-422,434,117,-175,-488,122,-519,-376,758,525,-712,-365,470,399,252,173,-305,105,-515,128,3,-657,730,265,132,457,-143,-368,-705,874,630,440,-779,374,-19,668,643,-996,-512,-499,715,-121,855,-417,-472,182,124,-898,-559,-402,435,517,248,-318,84,-856,-370,-493,949,-335,-242,-440,-248,365,776,-826,-566,-519,-152,717,-727,481,-568,-359,922,103,947,487,229,-988,-714,-74,548,753,129,956,595,663,-837,-694,-133,301,154,795,72,-165,949,-743,0,627);
    var max : int = 1;
    for ( var i : int = 1; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      if ( max ) {
        out.push(Math.max(Math.abs(t2), Math.abs(_in)));
        t2 = Math.min(Math.abs(t2), Math.abs(_in));
      } else {
        out.push(Math.min(Math.abs(t2), Math.abs(_in)));
        t2 = Math.max(Math.abs(t2), Math.abs(_in));
      }
      max ^= 1;
    }
    return out;
  }
  private static function Looping (in_arr : Array) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      in_arr[i] = Math.abs(in_arr[i]);
      var _in : int = in_arr[i];
      out.push(int(_in * (_in+1)/2));
    }
    in_arr.push(9,3,18,0,18,19,12,16,17,6,10,11,7,15,12,11,4,16,8,6,19,17,17,13,6,2,5,4,15,5,0,5,8,13,1,9,1,19,13,13,10,12,4,6,12,17,12,4,4,15,2,3,5,16,0,16,1,11,17,18,6,3,8,16,2,14,15,3,19,19,19,12,16,19,4,6,7,0,19,17,4,15,15,14,18,18,15,6,13,18,2,7,11,17,8,1,19,5,12,13,8,17,8,16,10,18,1,19,15,2,18,0,19,5,11,15,18,13,3,3,16,2,13,16,8,13,14,16,13,12,5,15,2,4,10,4,3,4,11,8,1,3,10,2,19,18,13,4,9,10,19,1,7,13,1,15,6,1,16,0,19,16,8,17,14,10,13,15,0,12,17,1,2,1,7,5,18,2,14,1,19,17,0,4,11,4,15,17,11,5,14,2,10,11,12,6,0,17,9,16,5,2,7,11,18,13,13,15,14,11,7,14,9,0,7,7,5,6,7,2,12,11,18,2,16,15,15,16,2,4,13,4,3,8,17,11,11,11,3,0,2,1,15,9,12,12,19,16,13,1);
    out.push(45,6,171,0,171,190,78,136,153,21,55,66,28,120,78,66,10,136,36,21,190,153,153,91,21,3,15,10,120,15,0,15,36,91,1,45,1,190,91,91,55,78,10,21,78,153,78,10,10,120,3,6,15,136,0,136,1,66,153,171,21,6,36,136,3,105,120,6,190,190,190,78,136,190,10,21,28,0,190,153,10,120,120,105,171,171,120,21,91,171,3,28,66,153,36,1,190,15,78,91,36,153,36,136,55,171,1,190,120,3,171,0,190,15,66,120,171,91,6,6,136,3,91,136,36,91,105,136,91,78,15,120,3,10,55,10,6,10,66,36,1,6,55,3,190,171,91,10,45,55,190,1,28,91,1,120,21,1,136,0,190,136,36,153,105,55,91,120,0,78,153,1,3,1,28,15,171,3,105,1,190,153,0,10,66,10,120,153,66,15,105,3,55,66,78,21,0,153,45,136,15,3,28,66,171,91,91,120,105,66,28,105,45,0,28,28,15,21,28,3,78,66,171,3,136,120,120,136,3,10,91,10,6,36,153,66,66,66,6,0,3,1,120,45,78,78,190,136,91,1);
    return out;
  }
  private static function Sum_Of_Series(n:int, p:int) : int {
    var i : int = n * int(p / n) * int(p / n + 1) / 2;
    return i;
  }
  private static function Looping_II (in_arr : Array) : Array {
    var out : Array = new Array;
    in_arr.push(130,327,67,342,265,353,40,320,253,416,346,284,31,171,401,155,228,94,194,120,80,68,60,287,381,134,128,90,481,295,483,475,212,246,187,463,247,214,128,476,341,276,431,471,163,157,347,401,301,58,25,313,2,484,120,276,278,56,48,79,372,459,448,354,12,329,197,210,341,149,64,219,326,79,26,102,390,376,24,175,109,27,443,169,370,182,51,114,267,326,310,13,363,224,208,205,432,163,149,3,110,416,274,184,211,380,56,392,31,227,449,251,122,316,448,41,119,206,280,67,417,113,426,417,210,316,178,350,174,345,62,113,216,279,434,324,52,144,149,449,12,135,208,241,142,224,68,149,315,82,5,307,54,338,362,489,116,453,1,126,40,79,319,80,96,38,236,132,394,272,322,39,187,14,382,399,18,81,152,9,102,128,249,412,282,276,292,285,438,212,262,273,128,447,444,311,171,439,192,402,493,109,240,105,312,343,295,153,87,309,6,470,489,270,243,47,468,458,72,176,127,426,240,309,328,340,68,465,69,75,316,374,477,341,156,337,436,319,334,11,105,211,49,64,243,183,396,297,28,468);
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      in_arr[i] = Math.abs(in_arr[i]);
      var _in : int = in_arr[i];
      out.push(int(Sum_Of_Series(4, _in) - Sum_Of_Series(8, _in)));
    }
    return out;
  }
  private static function Looping_III (in_arr : Array) : Array {
    var out : Array = new Array;
    var d : int = Math.random() * 20;
    in_arr[in_arr.length-1] = 0;
    // fill with 0s
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      if ( -- d <= 0 ) {
        in_arr[i] = 0;
        d = Math.random()*20;
      }
    }
    var out_t : Array = new Array;
    // get out
    for ( i = 0; i != in_arr.length; ++ i ) {
      out_t.push(in_arr[i]);
      if ( in_arr[i] == 0 ) {
        out_t.sort(Array.NUMERIC);
        // push non existing to out
        for ( var o : int = 0; o != out_t.length-1; ++ o ) {
          if ( out_t[o] == out_t[o+1] ) continue;
          for ( var t : int = out_t[o]+1; t != out_t[o+1]; ++ t )
            out.push(t);
        }
        out_t = new Array();
      }
    }
    in_arr.push(7,10,14,3,11,5,10,4,16,3,12,5,0,14,16,8,14,0,3,16,14,7,12,1,5,10,0,8,14,9,0,12,14,12,11,2,17,7,1,6,7,3,7,1,8,12,14,16,0,0,15,9,6,3,0,0,13,2,9,11,7,4,15,14,10,14,2,0,0,2,11,2,17,13,12,0,11,10,3,10,0,10,7,17,3,3,0,0,14,4,14,2,5,7,9,9,6,0,9,8,15,1,17,15,1,9,12,6,0,5,0,12,3,4,14,4,0,9,9,4,15,16,0,5,3,14,0,0,1,9,14,10,8,17,9,11,9,9,2,9,14,0,14,5,0,15,8,13,5,16,10,6,14,0,10,13,0,12,4,7,12,4,17,4,3,12,16,0,9,0,11,5,11,3,3,13,3,17,1,6,0,7,11,9,3,2,9,13,0,6,6,3,16,15,15,1,13,12,16,10,9,4,15,0,0,11,15,2,16,11,2,15,12,5,13,5,6,0,2,9,15,9,15,8,10,3,1,7,11,4,17,5,5,17,10,0,15,16,7,6,17,13,7,12,10,14,11,15,1,0);
    out.push(1,2,6,8,9,13,15,1,2,3,4,5,6,7,9,10,11,12,13,15,2,4,6,8,9,11,13,15,1,2,3,4,5,6,7,10,11,12,13,4,5,9,10,13,15,1,2,4,5,7,8,10,11,12,13,14,1,3,5,6,8,12,1,3,4,5,6,7,8,9,10,14,15,16,1,2,4,5,6,7,8,9,1,2,4,5,6,8,9,11,12,13,14,15,16,1,3,8,10,11,12,13,2,3,4,5,7,10,11,13,14,16,1,2,3,4,1,2,5,6,7,8,9,10,11,13,1,2,3,5,6,7,8,10,11,12,13,14,1,2,4,6,7,8,9,10,11,12,13,3,4,5,6,7,12,13,15,16,1,2,3,4,6,7,8,9,10,11,12,13,1,2,3,4,7,9,11,12,1,2,3,4,5,6,7,8,9,11,12,1,2,5,6,8,9,10,11,13,14,15,1,2,3,4,5,6,7,8,2,4,7,8,9,10,12,14,15,16,1,4,5,6,8,10,12,2,5,7,8,11,14,1,3,4,7,8,9,10,14,6,12,13,14,16,2,3,4,5,8,9);
    return out;
  }
  private static function Bit_Hack ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int(!(_in%2)));
    }
    in_arr.push(-915,975,567,-359,224,-184,319,-131,59,126,326,-468,771,27,397,-774,-507,427,54,748,-11,311,414,691,254,795,584,-427,-19,686,-478,574,310,-601,13,56,530,466,917,-629,-197,349,-299,-161,-404,-57,467,206,-946,392,882,-963,-37,910,348,-596,515,704,388,-938,-459,-302,819,-508,-622,-797,-48,604,-807,-231,518,798,106,40,-486,572,455,993,-35,-331,275,-446,-420,-25,-318,-968,478,820,258,-399,482,679,-384,-697,942,-155,388,-681,580,345,-271,332,-981,617,770,-732,-338,-557,-595,774,652,415,-553,-346,826,935,-266,-65,413,713,-866,-1,371,407,78,978,-224,860,-556,-2,92,867,-94,310,933,-870,-568,-755,-664,906,627,-768,-783,765,716,152,-449,-303,17,-675,134,53,-446,360,-174,927,104,335,-961,123,-650,971,707,284,478,-676,-295,555,488,-108,920,-267,15,-577,-840,-976,8,905,-176,-115,-754,-532,-388,282,-4,-46,156,480,-236,-208,-626,994,-85,615,530,-704,19,926,292,-111,518,709,-617,-27,-209,483,-311,900,124,115,-565,841,809,526,-95,-283,785,939,672,678,913,-424,-962,275,-168,-747,203,611,-710,801,456,-404,-3,979,371,279,-163,222,-464,811,-964,-918,773,681,750,659,-666,-724,353,559);
    out.push(0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,1,0,0);
    return out;
  }
  private static function Math_Ops_II ( in_arr : Array ) : Array {
    var out : Array = new Array;
    in_arr.push(627,-720,232,45,597,304,-662,371,-575,686,-162,669,904,-707,-472,-662,660,-286,-954,-211,681,683,-592,-796,-744,101,-569,369,-617,813,-28,329,219,368,-908,946,414,715,-148,256,-608,-49,-54,660,222,-14,-120,273,282,964,-78,-150,-363,-447,-487,-495,635,-669,-290,-181,-130,-806,-290,-766,-112,61,172,-303,636,-683,96,-46,-406,681,904,-67,608,934,969,170,-877,42,159,-675,-466,869,644,-189,-768,-861,125,-198,-313,440,-414,391,-659,-708,-732,979,933,-876,352,-195,-312,457,522,128,-44,-862,941,544,-911,-769,339,-57,-805,165,-519,-288,-249,-867,89,-779,380,-932,-966,-252,-313,-759,-597,-734,497,577,-286,-572,-395,533,159,-944,-669,82,780,-270,-577,-48,-379,427,-584,-820,-539,609,620,-576,-590,-288,-985,-663,-502,-340,-841,-692,962,906,-316,550,-399,-535,62,-169,-239,319,611,-556,788,863,-927,146,765,935,-704,631,980,-63,997,-549,-106,213,877,236,692,868,-997,949,-32,-991,-39,-808,-301,-666,-536,-188,-358,-232,19,84,551,-613,10,-791,-117,-628,218,904,-103,-542,-955,-500,457,330,-730,334,-483,-637,124,474,36,-243,498,868,489,-270,-298,741,785,-600,944,71,-613,-423,-270,-416,362,-719,600,443,-796,-388,-638,-569);
    for ( var i : int = 1; i != in_arr.length; ++ i ) {
      var _in  : int = in_arr[i];
      var _in2 : int = in_arr[i - 1];
      out.push(_in + _in2);
    }
    return out;
  }
  private static function Bit_Hack_II ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(-_in);
    }
    in_arr.push(770,804,709,-616,-210,-905,128,8,147,-566,-943,-114,-445,561,-465,973,-530,-908,561,800,-891,834,-448,272,-237,922,238,383,-263,-799,-497,593,-794,859,-401,-102,17,767,994,758,54,-443,239,994,831,45,332,104,594,792,41,-490,-377,-225,583,289,211,-41,685,-42,-252,-161,922,-458,530,-288,670,-312,730,-83,963,-429,-171,168,644,-218,324,-794,-443,-749,939,836,873,-509,66,-655,336,727,389,-99,-311,-698,-470,-373,-753,836,-888,-413,142,-218,-131,536,-729,-456,114,-326,874,-956,-4,525,771,629,701,22,-473,293,-918,-574,-754,545,-881,444,115,27,-741,-723,438,-231,786,879,326,-334,134,573,-779,-133,951,-604,217,-750,444,-360,-722,-830,-407,252,-863,-852,-69,-630,281,572,-359,398,-451,568,200,-103,885,-575,343,221,898,-662,-706,-646,131,-765,-710,278,-978,503,-771,-925,-603,-312,-323,105,-395,-949,-131,-209,77,519,946,-234,320,-324,-492,378,-285,-222,-20,-957,-552,745,-224,-217,249,604,-180,-814,-536,279,710,299,-110,-828,936,702,412,228,-99,564,-97,-6,-662,713,131,541,786,-980,293,832,809,-429,15,565,9,887,932,-242,421,57,-558,-871,-492,-888,325,-509,528,781,550,384,-940,-29,-415,86,27,-878);
    out.push(-770,-804,-709,616,210,905,-128,-8,-147,566,943,114,445,-561,465,-973,530,908,-561,-800,891,-834,448,-272,237,-922,-238,-383,263,799,497,-593,794,-859,401,102,-17,-767,-994,-758,-54,443,-239,-994,-831,-45,-332,-104,-594,-792,-41,490,377,225,-583,-289,-211,41,-685,42,252,161,-922,458,-530,288,-670,312,-730,83,-963,429,171,-168,-644,218,-324,794,443,749,-939,-836,-873,509,-66,655,-336,-727,-389,99,311,698,470,373,753,-836,888,413,-142,218,131,-536,729,456,-114,326,-874,956,4,-525,-771,-629,-701,-22,473,-293,918,574,754,-545,881,-444,-115,-27,741,723,-438,231,-786,-879,-326,334,-134,-573,779,133,-951,604,-217,750,-444,360,722,830,407,-252,863,852,69,630,-281,-572,359,-398,451,-568,-200,103,-885,575,-343,-221,-898,662,706,646,-131,765,710,-278,978,-503,771,925,603,312,323,-105,395,949,131,209,-77,-519,-946,234,-320,324,492,-378,285,222,20,957,552,-745,224,217,-249,-604,180,814,536,-279,-710,-299,110,828,-936,-702,-412,-228,99,-564,97,6,662,-713,-131,-541,-786,980,-293,-832,-809,429,-15,-565,-9,-887,-932,242,-421,-57,558,871,492,888,-325,509,-528,-781,-550,-384,940,29,415,-86,-27,878);
    return out;
  }
  private static function Stacks ( in_arr : Array ) : Array {
    var out : Array = new Array;
    // fill with random 0s from 3 ... 10 distance
    var dist : int = 0;
    while ( dist != in_arr.length-1 ) {
      var eres : int = Math.random() * 6 + 3;
      dist += eres;
      if ( dist >= in_arr.length )
        dist = in_arr.length;
      in_arr[dist] = 0;
    }
    in_arr.push(-669,-661,916,692,-201,773,-231,0,-169,-7,563,-255,0,-617,-147,0,-517,328,0,338,-357,347,299,-642,855,0,-620,6,112,-183,0,844,81,0,40,-327,446,0,-700,-73,-762,655,0,458,490,-989,14,347,0,-8,610,462,537,374,56,-493,0,408,93,611,704,0,563,210,234,160,421,0,-875,-238,914,-541,0,-480,-280,0,-1,-283,0,258,-292,-516,0,-904,-517,-427,-860,0,702,-454,17,0,135,763,420,197,575,-827,0,618,-674,-209,-806,0,-946,375,0,-286,24,-279,0,117,-577,364,0,-316,-343,133,-620,0,-394,838,-41,-427,-944,-281,0,-593,184,-472,-64,0,351,-542,489,852,-485,0,761,624,106,296,0,716,-458,-460,-531,-654,35,222,0,196,-179,-85,-176,0,788,-994,213,0,-561,-599,-272,-525,0,349,-279,-399,0,628,838,224,-79,322,433,450,0,395,143,515,-614,0,-263,876,0,818,-479,909,625,-962,-21,-746,0,801,241,-861,860,-696,0,-569,-323,-889,-754,0,342,-531,593,384,-709,0,15,-798,0,913,-399,71,518,-49,0,726,462,785,436,-995,0,686,845,493,0,-805,-465,0,-330,399,991,287,100,211,0,502,-38,0,-458,376,-406,-160,0,-507,-509,0);
    var st : Stack = new Stack(40); // "cheat" by using our own stack :O
    var i : int = 0;
    while ( true ) {
      st.Push(in_arr[i]);
      if ( in_arr[i] == 0 ) { // clear list
        st.Pop();
        var res:int = 0;
        var sub : int = 1;
        while ( !st.Is_Empty() ) {
          if ( sub )
            res -= st.Pop();
          else
            res += st.Pop();
          sub ^= 1;
        }
        out.push(int(res));
      }
      if ( in_arr.length <= ++ i ) break;
    }
    return out;
  }
  private static function Stacks_II ( in_arr : Array ) : Array {
    var out : Array = new Array;
    // fill with random 0s from 3 ... 10 distance
    var dist : int = 0;
    while ( dist != in_arr.length-1 ) {
      var eres : int = Math.random() * 6 + 3;
      dist += eres;
      if ( dist >= in_arr.length )
        dist = in_arr.length;
      in_arr[dist] = 0;
    }
    var st : Stack = new Stack(40); // "cheat" by using our own stack :O
    var i : int = 0;
    while ( true ) {
      st.Push(in_arr[i]);
      if ( in_arr[i] == 0 ) { // clear list
        out.push(st.R_Arr().sort(Array.NUMERIC | Array.RETURNINDEXEDARRAY) );
        while ( !st.Is_Empty() ) st.Pop();
      }
      if ( in_arr.length <= ++ i ) break;
    }
    return out;
  }
  private static function Is_Prime ( x : int ) : int {
    if ( x == 0 ) return 0;
    if ( x == 1 ) return 0;
    if ( x == 2 ) return 1;
    if ( x % 2 == 0 ) return 0;
    for ( var i : int = 3; i != int(Math.sqrt(x)) + 2; ++ i )
      if ( x % i == 0 ) return 0;
    return 1;
  }
  private static function Prime ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int(Is_Prime(_in)));
    }
    in_arr.push(5166,6746,2696,1984,2023,3379,7692,5811,1641,2377,6855,8531,6750,3213,9581,2027,8244,525,4953,754,6147,6522,1552,6315,3816,3336,973,1056,1142,3305,1452,7181,9706,4886,6805,501,1925,901,9941,6841,8285,6272,2639,9823,8759,2531,365,4896,9371,2310,3709,5918,4752,4557,8709,5066,3315,9054,3424,6059,492,4713,9142,7071,804,7532,758,5636,4519,8802,4034,3463,1650,4423,2812,7442,3747,1388,9448,4948,272,6232,3452,3021,4069,9102,2527,8470,1300,4188,892,8116,1376,4992,1961,976,3386,5640,4276,1907,57,4532,1737,59,1168,4079,1183,1391,4601,7044,597,9483,1814,142,9556,4070,5707,5950,8843,2918,5769,1841,2036,4797,8736,6065,1238,2436,6716,2210,1579,3854,4419,4317,4706,4381,1779,1292,9986,5111,9822,6469,9396,2166,3599,3663,778,9071,1442,6831,7527,8482,3353,8176,7726,1391,9336,4341,169,5806,2203,2608,1804,7251,72,4749,5256,3808,205,3201,4560,2189,7222,5922,7013,3179,4208,8866,3635,4046,8110,8676,1786,3983,1105,6182,8108,3868,2164,8596,8249,2112,7895,9598,4081,9861,6069,3897,8537,2646,5968,1700,3067,5978,7433,3002,2512,9998,5439,8281,5920,9563,3390,2182,5993,5424,6976,6787,7108,8685,8893,9390,9841,5793,2593,8830,4487,3443,2117,1966,7907,6088,1158,3181,5062,5846,5204,6178,7133,5789,3783,2988,953,3002,2596,7071,6692,4117,2987,8861);
    out.push(0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1);
    return out;
  }
  private static function Fibonacci_Helper ( t : int ) : int {
    // summation of fib sequence using t as index
    ++ t;
    var first  : int = 0;
    var second : int = 1;
    var next   : int;
    
    for ( var c : int = 0; c < t; ++ c ) {
      if ( c <= 1 )
        next = c;
      else {
        next = first + second;
        first = second;
        second = next;
      }
    }
    return next;
  }
  private static function Fibonacci ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(Fibonacci_Helper(_in));
    }
    in_arr.push(4,17,27,29,24,13,20,20,24,19,3,21,27,29,9,10,11,7,23,24,14,11,27,22,18,5,24,22,19,11,4,18,20,3,8,5,15,18,14,24,29,29,4,24,12,8,13,12,7,13,19,13,7,3,8,17,15,5,25,23,3,29,6,22,19,14,16,27,9,9,17,21,5,16,3,6,21,6,4,27,15,18,24,24,10,29,15,28,7,13,23,12,6,27,4,10,14,11,11,25,20,24,22,26,28,21,9,14,3,16,13,15,13,29,12,4,3,27,19,5,27,5,9,27,25,17,25,9,26,24,7,8,24,27,14,5,17,4,21,26,24,11,12,10,29,9,22,13,11,7,19,11,16,24,18,27,17,29,18,9,20,28,3,24,28,6,23,19,12,9,27,3,27,16,17,24,12,27,14,24,27,29,25,11,18,28,29,6,4,18,21,8,18,23,19,7,19,7,23,12,28,25,24,6,28,4,16,17,18,21,7,12,26,29,15,21,19,12,12,24,25,15,25,15,3,7,27,7,28,13,17,25,17,29,11,27,18,26,20,17,18,9,8,16,25,26,17,29,21,27);
    out.push(3,1597,196418,514229,46368,233,6765,6765,46368,4181,2,10946,196418,514229,34,55,89,13,28657,46368,377,89,196418,17711,2584,5,46368,17711,4181,89,3,2584,6765,2,21,5,610,2584,377,46368,514229,514229,3,46368,144,21,233,144,13,233,4181,233,13,2,21,1597,610,5,75025,28657,2,514229,8,17711,4181,377,987,196418,34,34,1597,10946,5,987,2,8,10946,8,3,196418,610,2584,46368,46368,55,514229,610,317811,13,233,28657,144,8,196418,3,55,377,89,89,75025,6765,46368,17711,121393,317811,10946,34,377,2,987,233,610,233,514229,144,3,2,196418,4181,5,196418,5,34,196418,75025,1597,75025,34,121393,46368,13,21,46368,196418,377,5,1597,3,10946,121393,46368,89,144,55,514229,34,17711,233,89,13,4181,89,987,46368,2584,196418,1597,514229,2584,34,6765,317811,2,46368,317811,8,28657,4181,144,34,196418,2,196418,987,1597,46368,144,196418,377,46368,196418,514229,75025,89,2584,317811,514229,8,3,2584,10946,21,2584,28657,4181,13,4181,13,28657,144,317811,75025,46368,8,317811,3,987,1597,2584,10946,13,144,121393,514229,610,10946,4181,144,144,46368,75025,610,75025,610,2,13,196418,13,317811,233,1597,75025,1597,514229,89,196418,2584,121393,6765,1597,2584,34,21,987,75025,121393,1597,514229,10946,196418);
    return out;
  }
  private static function Palindrome ( in_arr : Array ) : Array {
    var out : Array = new Array;
    // force palindrome 1 ... 5
    var dist : int = 0;
    while ( dist != in_arr.length-1 ) {
      var eres : int = Math.random() * 4 + 1;
      dist += eres;
      if ( dist >= in_arr.length )
        break;
      in_arr[dist] = 
        int ( String(in_arr[dist]) +
        (String(in_arr[dist]).split("").reverse().join("")));
    }
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      if ( String(_in) == String(_in).split("").reverse().join("") )
        out.push(1);
      else
        out.push(0);
    }
    in_arr.push(1799,3894,7063,68600686,7283,5342,37800873,15055051,31177113,9003,500005,7378,45677654,2958,1544,1766,69477496,65,6567,32844823,4391,5304,38800883,3057,1091,7600,21499412,5402,6671,85111158,1505,7401,5260,54066045,7548,7484,764,848848,3089,2778,2227,65544556,8284,229,3378,22866822,1492,2899,8075,35722753,37211273,6954,20200202,8723,9660,1524,69488496,34411443,5569,67822876,3350,5220,3069,62766726,45022054,7496,4958,38888883,35822853,66977966,59400495,6159,8578,14255241,73522537,8567,6954,4067,57244275,3082,10588501,51088015,1106,50455405,5216,4025,5015,61033016,6432,5160,36811863,8129,91522519,5350,6881,7747,91788719,3329,9907,9904,10088001,93300339,93699639,9549,7012,1924,22677622,7639,42411424,221,1737,46222264,9672,5031,8650,69222296,3086,5202,88911988,46166164,2983,659,45200254,39900993,7244,3523,8071,932239,424424,34555543,9290,85355358,1186,292,93411439,9855,9906,29622692,5062,8977,19266291,7944,297,3944,75988957,28711782,47200274,2063,13377331,38200283,20333302,4373,3505,6019,79222297,48055084,6634,7405,71577517,5289,899,68966986,2879,54188145,684,20588502,50533505,45511554,3105,90655609,1487,52822825,8328,7071,982289,4596,9378,4554,420,3838,6405,20233202,197,5,49777794,23788732,3525,34788743,667,6033,735,34488443,658,77200277,209,27911972,6473,8991,86699668,1255,6183,6720,46899864,40422404,85766758,154,72511527,7015,89211298,7155,21044012,23555532,29099092,69744796,8548,6101,13966931,6410,5540,23144132,2420,6935,86166168,2854,2256,5593,27266272,488,6964,7984,51677615,3170,8214,165561,3961,3754,65666656,70755707,44900944,5540,2555,1635,23544532,5024,7016,23655632,8640,8886,74377347,9183);
    out.push(0,0,0,1,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0);
    return out;
  }
  private static function Math_Ops_III ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int(_in * -64));
    }
    in_arr.push(828,351,685,-792,286,801,-524,-501,-635,-865,363,943,6,660,917,868,-439,-886,-731,670,513,-425,-136,-126,80,-154,443,280,390,122,856,744,-11,663,186,-655,-464,521,-731,-105,-455,-693,308,-952,-827,911,977,659,373,-855,-850,51,583,-411,-737,-797,452,-513,7,971,343,705,329,-554,-255,648,-518,-744,-433,-682,477,-295,389,878,497,471,756,227,104,-930,-916,-527,-366,918,-190,467,911,-519,943,668,-260,-596,-19,-924,-640,17,-158,747,-477,-195,-961,-256,379,560,-691,821,-638,440,-446,-976,833,-776,892,862,718,921,-598,-57,-935,-658,-634,-809,877,734,371,-510,110,41,850,106,127,249,-3,783,990,448,794,228,223,328,802,-411,-908,-109,-842,208,122,981,104,404,-574,-162,-517,-706,220,-801,-863,-988,-583,275,-136,-121,-801,-666,688,-645,-301,-507,186,514,-492,789,-227,-123,-4,-518,324,0,-267,-141,-367,990,157,-18,-526,200,133,765,5,-382,-538,472,181,138,925,17,792,556,441,-852,249,27,174,-465,-644,-966,-307,-478,103,-424,111,579,-221,390,-840,457,319,300,-715,-374,-804,-409,142,883,-189,-539,-319,-491,654,879,-391,-458,-719,584,-519,64,635,690,841,151,-686,256,447,-522,-431,-550,586,629,816,820);
    out.push(-52992,-22464,-43840,50688,-18304,-51264,33536,32064,40640,55360,-23232,-60352,-384,-42240,-58688,-55552,28096,56704,46784,-42880,-32832,27200,8704,8064,-5120,9856,-28352,-17920,-24960,-7808,-54784,-47616,704,-42432,-11904,41920,29696,-33344,46784,6720,29120,44352,-19712,60928,52928,-58304,-62528,-42176,-23872,54720,54400,-3264,-37312,26304,47168,51008,-28928,32832,-448,-62144,-21952,-45120,-21056,35456,16320,-41472,33152,47616,27712,43648,-30528,18880,-24896,-56192,-31808,-30144,-48384,-14528,-6656,59520,58624,33728,23424,-58752,12160,-29888,-58304,33216,-60352,-42752,16640,38144,1216,59136,40960,-1088,10112,-47808,30528,12480,61504,16384,-24256,-35840,44224,-52544,40832,-28160,28544,62464,-53312,49664,-57088,-55168,-45952,-58944,38272,3648,59840,42112,40576,51776,-56128,-46976,-23744,32640,-7040,-2624,-54400,-6784,-8128,-15936,192,-50112,-63360,-28672,-50816,-14592,-14272,-20992,-51328,26304,58112,6976,53888,-13312,-7808,-62784,-6656,-25856,36736,10368,33088,45184,-14080,51264,55232,63232,37312,-17600,8704,7744,51264,42624,-44032,41280,19264,32448,-11904,-32896,31488,-50496,14528,7872,256,33152,-20736,0,17088,9024,23488,-63360,-10048,1152,33664,-12800,-8512,-48960,-320,24448,34432,-30208,-11584,-8832,-59200,-1088,-50688,-35584,-28224,54528,-15936,-1728,-11136,29760,41216,61824,19648,30592,-6592,27136,-7104,-37056,14144,-24960,53760,-29248,-20416,-19200,45760,23936,51456,26176,-9088,-56512,12096,34496,20416,31424,-41856,-56256,25024,29312,46016,-37376,33216,-4096,-40640,-44160,-53824,-9664,43904,-16384,-28608,33408,27584,35200,-37504,-40256,-52224,-52480);
    return out;
  }
  private static function Bit_Hack_III ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int(_in / 3));
    }
    in_arr.push(128,146,33,95,59,84,126,199,120,50,186,48,106,199,96,189,36,114,101,16,11,52,84,94,65,28,175,73,46,61,184,94,129,121,148,128,178,90,150,146,186,139,141,29,40,35,48,49,51,131,119,61,12,105,42,35,145,196,35,49,40,167,32,156,8,55,49,45,76,18,24,28,53,123,133,136,172,49,78,83,122,133,23,35,49,114,140,136,179,92,119,84,129,58,164,164,145,63,107,43,157,74,119,29,97,63,7,12,161,69,143,142,154,86,35,182,147,90,88,62,12,106,121,189,72,17,2,156,181,104,18,100,21,147,175,39,76,178,105,195,117,95,132,71,50,154,156,56,125,139,25,60,119,146,191,172,13,7,141,42,93,163,74,53,47,25,170,70,112,3,154,164,32,44,74,16,188,58,124,126,181,80,160,29,186,35,139,5,39,171,151,160,53,16,83,124,193,115,124,12,174,51,165,119,8,124,83,8,154,1,124,57,118,189,138,143,97,104,188,45,94,69,106,194,76,87,69,149,84,181,84,55,187,101,33,57,26,137,157,144,70,17,76,65,152,98,186,96,96,128);
    out.push(42,48,11,31,19,28,42,66,40,16,62,16,35,66,32,63,12,38,33,5,3,17,28,31,21,9,58,24,15,20,61,31,43,40,49,42,59,30,50,48,62,46,47,9,13,11,16,16,17,43,39,20,4,35,14,11,48,65,11,16,13,55,10,52,2,18,16,15,25,6,8,9,17,41,44,45,57,16,26,27,40,44,7,11,16,38,46,45,59,30,39,28,43,19,54,54,48,21,35,14,52,24,39,9,32,21,2,4,53,23,47,47,51,28,11,60,49,30,29,20,4,35,40,63,24,5,0,52,60,34,6,33,7,49,58,13,25,59,35,65,39,31,44,23,16,51,52,18,41,46,8,20,39,48,63,57,4,2,47,14,31,54,24,17,15,8,56,23,37,1,51,54,10,14,24,5,62,19,41,42,60,26,53,9,62,11,46,1,13,57,50,53,17,5,27,41,64,38,41,4,58,17,55,39,2,41,27,2,51,0,41,19,39,63,46,47,32,34,62,15,31,23,35,64,25,29,23,49,28,60,28,18,62,33,11,19,8,45,52,48,23,5,25,21,50,32,62,32,32,42);
    return out;
  }
  private static function Bit_Hack_IV ( in_arr : Array ) : Array {
    var out : Array = new Array;
    in_arr.push(1314321561,1552197399,-1872895081,-277465479,-450620803,-1900563253,1877174797,-2050675981,-827056813,-2119740217,-2074770077,-1680841679,-1164818491,-54575679,135344205,225849149,1354715381,-705933411,-533177537,2050459541,1101735479,-1027537421,2142777141,-1571995917,-1602279717,-289248145,291793241,2047889757,1542428859,-1010599777,1662984113,1592783313,341406509,271728789,-809531737,810616009,-1416773281,634955007,624085409,673339043,-936852385,-647003653,-1798127371,1327493149,-1335666455,5362025,140170419,1052859075,-454446463,461907081,567004465,136233257,900140719,-944943447,-304709279,-425680219,-845393669,972604293,186464901,-1345701939,2032864117,1899948349,714385071,1169393539,1401207275,2018960465,-1690241663,-194131699,-75619613,417223137,-1097504523,-1221166055,2106062471,189549661,-822581359,468805821,1782914303,-627535265,-368543073,-74049597,-1058061553,1278380463,538860651,-1517468567,776593069,1409225667,1100126375,1920768273,-1576291833,1222957951,-283161533,860787487,-2138063663,647693851,529155409,1458906053,-1897147315,1940248051,-1002343983,-927684675,1869434859,709362437,1323522731,-403154573,-110091733,1471532163,-136356929,-1451262777,1114456725,-1106671827,-913934503,1593476813,1250425443,280803721,931909829,589416939,122316737,-828651557,-441364177,300839465,-1009028669,-729931077,1176171471,-1986089045,-588702947,449148461,-242898913,-574586539,-578167143,-1868638789,1035047985,2130482967,1377274161,-571389911,644509869,1739251005,1523761289,-1672502681,-1442729125,889495277,604613981,-273288457,-911574823,-1170869215,-778609781,-1314329493,1096615965,87164071,-612051699,-364994725,1933282195,1171107607,1260418351,1759622229,1665612137,-434192501,-2061734463,-991809883,448366869,-669878001,-2012969883,-2135916651,-1695859617,-1496752357,559443873,-71092645,-1989717835,1170090701,-997605217,1511215185,1886107205,-393817367,1444567093,-1896774979,-180917735,-980689487,-690939831,-635904257,666346895,-1999034405,-771683547,94810925,416434733,-2020970901,-1024020229,-1705572677,-340751907,1461553751,-1512534611,-1624940545,-1199555399,-1203267645,-1828111137,231115499,56812813,-1593484989,-458769069,1340459965,-83263283,1981476745,1097234721,-1027671223,-469699299,-1424279411,499959265,217180989,-1208468409,1370203111,1449029837,-691045025,304131685,-929613437,-129977031,907350635,-2009271917,-2091277729,-208678793,746336459,-638697591,-729012965,-1009183523,-1931721969,268152261,-880194065,196267947,1301794219,2027211409,1387063109,555789439,1313991365,257529249,154235813,-609591759,-882628251,1408041399,-1709878879,-600805739,-1378124865,-2101400541,1033518615,1948102011,-115947155,766951633,-1706334861,-538792705,493291425,1980022671,2133471827,370102455,1938639583);
    for ( var i : int = 0; i < in_arr.length-1; ++ i ) {
      var _in_u : uint = in_arr[i  ]&0xFFFF0000,
          _in_l : uint = in_arr[++i]&0x0000FFFF;
      out.push(_in_u|_in_l);
    }
    return out;
  }
  private static function Mini_Calculator ( in_arr : Array ) : Array {
    var out : Array = new Array;
    while ( in_arr.length % 3 != 0 ) in_arr.pop();
    // fill every 3 with math ops
    var count : int = 0;
    for ( var i : int = 1; i != in_arr.length; ++ i ) {
      if ( count++ % 3 == 0 )
        in_arr[i] = int(Math.round(Math.random()));
    }
    for ( i = 0; i != in_arr.length; ++ i ) {
      var v1 : int = in_arr[i++];
      var op : int = in_arr[i++];
      var v2 : int = in_arr[i  ];
      switch ( op ) {
        case 0:
          out.push(int(v1 + v2));
        break;
        case 1: // sub
          out.push(int(v1 - v2));
        break;
      }
    }
    in_arr.push(619,0,-69,179,1,-1,-664,0,595,-872,0,-194,607,1,872,289,0,-822,159,0,-863,142,1,365,-118,1,-277,-802,0,-732,-309,1,670,-43,0,223,-54,1,-599,-277,1,-375,-117,1,-775,-523,1,-3,-901,0,529,240,1,678,212,1,294,-596,0,165,151,0,515,90,0,-323,209,1,13,9,0,-484,-128,1,-976,-783,1,-149,607,0,762,87,0,-432,611,0,842,473,1,892,582,1,-514,-574,1,-959,351,1,-356,6,1,-97,201,1,631,-526,1,-941,612,1,113,626,1,34,-880,0,-201,-503,1,374,302,0,-387,77,1,106,804,1,43,896,1,670,794,0,556,-828,0,284,-19,0,-58,689,1,-771,-934,0,91,293,1,791,-525,0,-494,801,0,468,-72,1,723,787,0,345,-422,0,-727,-137,0,-882,-849,0,127,-822,1,-636,-591,1,438,-981,1,808,-542,0,-35,695,0,-409,-357,1,-659,759,1,492,985,1,837,-621,1,-912,538,1,935,-362,1,994,59,0,-344,625,1,-857,-380,1,444,186,1,-2,3,0,-672,615,1,662,348,0,130,211,0,106,-747,0,-539,761,1,-66,-471,0,384,-442,0,-942,569,0,347,-738,1,-575,151,0,371);
    out.push(550,180,-69,-1066,-265,-533,-704,-223,159,-1534,-979,180,545,98,658,-520,-372,-438,-82,-431,666,-233,196,-475,848,-634,1369,-345,1453,-419,1096,385,707,103,-430,415,499,592,-1081,-877,-85,-29,761,226,1350,-544,-77,1460,-843,-498,-1019,1269,-795,1132,-1149,-1019,-722,-186,-1029,-1789,-577,286,302,267,148,291,-397,-1356,-285,1482,-824,188,-669,-47,478,317,-1286,827,-87,-1384,916,-163,522);
    return out;
  }
  private static function Formulas ( in_arr : Array ) : Array {
    var out : Array = new Array();
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int(30 + 5*_in));
    }
    in_arr.push(-529,-371,29,494,815,-731,-890,-99,399,125,-953,-406,393,-112,797,111,-167,933,930,-119,653,622,202,-438,-915,155,-706,867,930,778,275,-177,612,-656,653,662,459,-46,333,172,909,913,-121,224,-342,710,611,219,842,-672,-891,864,384,-554,-503,164,236,884,311,77,82,11,-182,-647,-822,781,907,210,658,-304,-681,960,-848,827,493,-96,110,-993,875,-839,-533,-772,-768,-690,238,73,-791,-632,734,-744,376,-165,990,780,-995,259,-554,-894,578,-862,379,-396,-936,-877,-615,-81,-566,971,-42,849,297,-810,617,-394,-159,451,15,-597,628,-694,890,501,890,153,112,-895,951,405,-54,-835,461,265,-826,211,338,-97,-227,-275,375,-933,-40,-165,-221,156,846,467,-817,46,-835,993,-188,185,690,4,-313,18,346,-782,-594,720,361,794,747,6,-906,-653,117,859,-414,994,288,-335,924,-166,578,-281,109,-304,689,681,-147,-632,-477,-271,482,952,-13,-737,-567,517,-632,-119,-694,209,602,228,-849,854,-95,-741,-421,-454,62,-319,-621,-118,917,-513,970,-503,922,-788,-63,356,503,229,-587,-476,-756,-363,-192,-178,-799,697,-692,667,-135,-941,-435,354,-365,262,986,-778,772,454,-359,761,235,-379,423,873,512,-303,-98,499,834,444,-817,-57);
    out.push(-2615,-1825,175,2500,4105,-3625,-4420,-465,2025,655,-4735,-2000,1995,-530,4015,585,-805,4695,4680,-565,3295,3140,1040,-2160,-4545,805,-3500,4365,4680,3920,1405,-855,3090,-3250,3295,3340,2325,-200,1695,890,4575,4595,-575,1150,-1680,3580,3085,1125,4240,-3330,-4425,4350,1950,-2740,-2485,850,1210,4450,1585,415,440,85,-880,-3205,-4080,3935,4565,1080,3320,-1490,-3375,4830,-4210,4165,2495,-450,580,-4935,4405,-4165,-2635,-3830,-3810,-3420,1220,395,-3925,-3130,3700,-3690,1910,-795,4980,3930,-4945,1325,-2740,-4440,2920,-4280,1925,-1950,-4650,-4355,-3045,-375,-2800,4885,-180,4275,1515,-4020,3115,-1940,-765,2285,105,-2955,3170,-3440,4480,2535,4480,795,590,-4445,4785,2055,-240,-4145,2335,1355,-4100,1085,1720,-455,-1105,-1345,1905,-4635,-170,-795,-1075,810,4260,2365,-4055,260,-4145,4995,-910,955,3480,50,-1535,120,1760,-3880,-2940,3630,1835,4000,3765,60,-4500,-3235,615,4325,-2040,5000,1470,-1645,4650,-800,2920,-1375,575,-1490,3475,3435,-705,-3130,-2355,-1325,2440,4790,-35,-3655,-2805,2615,-3130,-565,-3440,1075,3040,1170,-4215,4300,-445,-3675,-2075,-2240,340,-1565,-3075,-560,4615,-2535,4880,-2485,4640,-3910,-285,1810,2545,1175,-2905,-2350,-3750,-1785,-930,-860,-3965,3515,-3430,3365,-645,-4675,-2145,1800,-1795,1340,4960,-3860,3890,2300,-1765,3835,1205,-1865,2145,4395,2590,-1485,-460,2525,4200,2250,-4055,-255);
    return out;
  }
  private static function Formulas_II ( in_arr : Array ) : Array {
    var out : Array = new Array();
    in_arr.push(337,156,-368,206,-487,874,89,-613,727,421,-174,-263,297,-3,-501,899,854,991,800,-385,810,-403,-704,16,653,580,804,540,925,-87,843,-712,168,-710,224,815,-360,-396,-895,577,-361,396,-652,610,-744,-55,472,-251,-488,-515,608,645,675,544,491,-787,573,836,717,-941,-120,-74,45,-529,943,82,-555,-742,-912,-595,-382,-437,-910,713,-906,964,710,270,973,-296,-868,966,487,488,649,-387,519,802,147,213,381,155,-389,987,-441,-152,-598,713,-308,-146,166,687,-511,440,-910,-336,-875,314,-115,686,331,808,961,550,898,974,-43,173,-846,196,-274,-483,952,-831,405,407,-878,358,566,-70,831,616,-40,-538,831,256,571,-111,250,-728,576,621,-973,482,-744,859,-199,762,-731,219,-603,907,-435,-383,-533,99,861,942,-474,-679,-6,-445,-204,939,-236,-825,278,440,100,-293,755,-538,-669,-356,43,-769,-840,-330,960,88,58,943,934,510,-590,291,-328,-557,915,49,-859,224,-334,673,876,391,79,-732,757,-767,442,-647,-971,659,363,142,-395,462,-331,-69,383,-98,-285,-878,854,863,599,-819,815,-947,645,239,-902,-656,18,-571,-552,-228,-283,-887,-253,129,915,733,451,-263,280,774,864,-75,311,952,-384,-610,411,-635,-440,-6,-714,586);
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int(Math.pow((2*_in-1),2) - (_in+32)*4));
    }
    return out;
  }
  private static function Formulas_III ( in_arr : Array ) : Array {
    var out : Array = new Array();
    in_arr.push(898,-238,783,725,49,595,916,-449,-251,-966,736,-89,631,656,-641,393,974,621,44,674,280,-926,75,-547,-116,927,-90,-81,-41,528,834,-806,-840,-954,-329,547,835,-281,591,-159,-841,939,666,756,868,-442,394,-418,-256,-162,-617,-692,-124,-312,117,164,814,-42,168,863,-151,-531,133,601,-670,464,-2,375,220,153,271,37,110,589,-140,-935,124,433,-260,-226,-625,-19,416,208,-893,-443,-260,-244,697,245,543,-33,-335,992,-780,-198,547,-633,909,370,-751,-72,794,190,538,328,-287,881,950,-309,873,169,559,-800,207,706,554,-392,-637,479,994,-763,-619,824,-274,628,570,534,-985,711,797,-386,-952,703,324,343,404,-314,61,-375,-840,-487,-812,-566,136,496,-14,-350,903,-646,-438,-804,-927,-387,221,298,356,492,-299,808,516,847,-187,168,-91,-698,635,24,276,-142,64,-12,366,571,-588,486,137,781,-254,897,-217,-725,-380,-68,903,-243,918,-700,317,-260,-736,-552,222,282,-469,-340,798,735,530,261,283,44,-302,136,-328,-778,-201,141,-79,160,840,-853,29,697,357,393,268,-888,-322,891,263,-997,609,-958,31,-447,-241,-557,659,-428,355,549,48,959,947,200,-135,881,-65,291,598,489,-566,151,941,-827,-66,718,-871,405);
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      out.push(int((3.1417 * _in)));  
    }
    return out;
  }
  private static function Formulas_IV ( in_arr : Array ) : Array {
    var out : Array = new Array();
    in_arr.push(-7019,3640,9227,5751,-6413,9110,7581,1463,-1500,4796,-1314,-3116,-3341,-5332,-9682,-9127,-6819,-3105,8233,7662,-5318,9480,-9388,6870,2047,8109,-4785,7676,-5783,6952,7401,8514,-2831,-2794,-9680,6922,-2962,4956,-8950,375,7034,7909,4044,6543,-5060,-5245,-2995,7746,9307,-3558,-9558,-9625,3873,3938,-3555,-871,-9347,-4476,-1381,-9727,-2563,2030,5052,-1907,5728,2401,423,-3512,-3979,2933,-6652,-6901,-306,-1215,4600,-9428,5874,-3006,15,1888,4071,-1234,9273,-2219,-3069,-3201,-557,-7904,-3776,-7440,-4415,5127,3839,9805,100,7809,5268,3350,-8402,706,3889,9287,-2523,-4968,2969,4695,-1337,-8268,2952,3149,-3143,4802,-719,-5591,1967,1871,-3188,2030,-4117,-6769,7202,-3641,6835,-8685,-8895,8692,-187,-7318,-6672,-9410,8346,8768,2896,4054,-7921,-3033,6364,6038,-1585,-5045,-2836,1495,-8805,-2014,-3021,-2426,6129,-1569,-3331,-2015,551,-6623,2884,4418,-8725,-2490,-8480,-7324,7937,-7460,-5607,2015,-3492,-6476,-5693,3912,-7345,-7498,3932,4958,4266,3384,6551,2247,9013,-6296,8504,-4571,9844,-6442,-2779,-3546,8840,3905,-9254,428,8183,-9846,-4298,-331,9270,-6268,-5359,9355,9069,-1292,4820,-771,1756,-319,-4556,5336,-1372,-4628,3588,2854,1573,9000,2155,5066,9888,3749,6877,4625,7971,2051,-2946,5560,-8904,8882,-2930,-4883,3491,-4052,-8137,5037,3384,-9236,7526,5432,-5986,4309,8139,21,-2782,-1246,5754,1340,2019,1931,9525,7032,9562,4528,1392,5543,8422,5475,9468,5259);
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _in : int = in_arr[i];
      if ( i > 249 )
        _in = int(3.1415926535898 * _in);
      else
        _in = int(Math.floor(3.1415926535898 * _in));
      out.push(_in);
    }
    return out;
  }
  private static function LCD ( in_arr : Array ) : Array {
    var out : Array = new Array;
    in_arr.push(128,146,33,95,59,84,126,199,120,50,186,48,106,199,96,189,36,114,101,16,11,52,84,94,65,28,175,73,46,61,184,94,129,121,148,128,178,90,150,146,186,139,141,29,40,35,48,49,51,131,119,61,12,105,42,35,145,196,35,49,40,167,32,156,8,55,49,45,76,18,24,28,53,123,133,136,172,49,78,83,122,133,23,35,49,114,140,136,179,92,119,84,129,58,164,164,145,63,107,43,157,74,119,29,97,63,7,12,161,69,143,142,154,86,35,182,147,90,88,62,12,106,121,189,72,17,2,156,181,104,18,100,21,147,175,39,76,178,105,195,117,95,132,71,50,154,156,56,125,139,25,60,119,146,191,172,13,7,141,42,93,163,74,53,47,25,170,70,112,3,154,164,32,44,74,16,188,58,124,126,181,80,160,29,186,35,139,5,39,171,151,160,53,16,83,124,193,115,124,12,174,51,165,119,8,124,83,8,154,1,124,57,118,189,138,143,97,104,188,45,94,69,106,194,76,87,69,149,84,181,84,55,187,101,33,57,26,137,157,144,70,17,76,65,152,98,186,96,96,128);
    for ( var i : int = 0; i != in_arr.length-1; ++ i ) {
      var a : int = in_arr[i];
      var b: int = in_arr[++i];
      // get GCD
      var temp : int = 1;
      for ( var o : int = 1;  o < a-1; ++ o )
        temp += Math.floor(o*b/a);
      out.push( (a*b) / (2*temp + a + b - (a*b)) );
    }
    return out;
  }
  private static function Count_Bits ( in_arr : Array ) : Array {
    var out : Array = new Array;
    in_arr.push(1314321561,1552197399,-1872895081,-277465479,-450620803,-1900563253,1877174797,-2050675981,-827056813,-2119740217,-2074770077,-1680841679,-1164818491,-54575679,135344205,225849149,1354715381,-705933411,-533177537,2050459541,1101735479,-1027537421,2142777141,-1571995917,-1602279717,-289248145,291793241,2047889757,1542428859,-1010599777,1662984113,1592783313,341406509,271728789,-809531737,810616009,-1416773281,634955007,624085409,673339043,-936852385,-647003653,-1798127371,1327493149,-1335666455,5362025,140170419,1052859075,-454446463,461907081,567004465,136233257,900140719,-944943447,-304709279,-425680219,-845393669,972604293,186464901,-1345701939,2032864117,1899948349,714385071,1169393539,1401207275,2018960465,-1690241663,-194131699,-75619613,417223137,-1097504523,-1221166055,2106062471,189549661,-822581359,468805821,1782914303,-627535265,-368543073,-74049597,-1058061553,1278380463,538860651,-1517468567,776593069,1409225667,1100126375,1920768273,-1576291833,1222957951,-283161533,860787487,-2138063663,647693851,529155409,1458906053,-1897147315,1940248051,-1002343983,-927684675,1869434859,709362437,1323522731,-403154573,-110091733,1471532163,-136356929,-1451262777,1114456725,-1106671827,-913934503,1593476813,1250425443,280803721,931909829,589416939,122316737,-828651557,-441364177,300839465,-1009028669,-729931077,1176171471,-1986089045,-588702947,449148461,-242898913,-574586539,-578167143,-1868638789,1035047985,2130482967,1377274161,-571389911,644509869,1739251005,1523761289,-1672502681,-1442729125,889495277,604613981,-273288457,-911574823,-1170869215,-778609781,-1314329493,1096615965,87164071,-612051699,-364994725,1933282195,1171107607,1260418351,1759622229,1665612137,-434192501,-2061734463,-991809883,448366869,-669878001,-2012969883,-2135916651,-1695859617,-1496752357,559443873,-71092645,-1989717835,1170090701,-997605217,1511215185,1886107205,-393817367,1444567093,-1896774979,-180917735,-980689487,-690939831,-635904257,666346895,-1999034405,-771683547,94810925,416434733,-2020970901,-1024020229,-1705572677,-340751907,1461553751,-1512534611,-1624940545,-1199555399,-1203267645,-1828111137,231115499,56812813,-1593484989,-458769069,1340459965,-83263283,1981476745,1097234721,-1027671223,-469699299,-1424279411,499959265,217180989,-1208468409,1370203111,1449029837,-691045025,304131685,-929613437,-129977031,907350635,-2009271917,-2091277729,-208678793,746336459,-638697591,-729012965,-1009183523,-1931721969,268152261,-880194065,196267947,1301794219,2027211409,1387063109,555789439,1313991365,257529249,154235813,-609591759,-882628251,1408041399,-1709878879,-600805739,-1378124865,-2101400541,1033518615,1948102011,-115947155,766951633,-1706334861,-538792705,493291425,1980022671,2133471827,370102455,1938639583);
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      //http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer
      var a = in_arr[i];
      a = a - ((a >> 1) & 0x55555555);
      a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
      out.push((((a + (a >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24);
    }
    return out;
  }
  private static function Log_2 ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      out.push(Math.log(in_arr[i])/Math.log(2));
    }
    return out;
  }
  private static function High_Index ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var _i : int = in_arr[i];
      if ( !_i )
        out.push(0);
      else {
        var ret : int = 1;
        while ( _i >>= 1 )
          ret <<= 1;
        out.push(ret);
      }
    }
    return out;
  }
  private static function Swap_Half ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      var h : int = ~(in_arr[i]&0x0000FFFF),
          l : int = ~(in_arr[i]&0xFFFF0000);
      out.push(int(h|l));
    }
    return out;
  }
  private static function Modulo ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length-1; ++ i ) {
      var a = in_arr[ i ],
          b = in_arr[i+1];
      if ( b > a ) {
        b ^= a;
        a ^= b;
        b ^= a;
        in_arr[ i ] = b;
        in_arr[i+1] = a;
      }
      ++ i;
      out.push(int(b%a));
    }
    return out;
  }
  private static function Overflow_Add ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length-1; ++ i ) {
      var a = in_arr[ i ],
          b = in_arr[i+1];
      ++ i;
      out.push(int(int(a+b)<0));
    }
    return out;
  }
  private static function Overflow_Mult ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length-1; ++ i ) {
      var a = in_arr[ i ],
          b = in_arr[i+1];
      ++ i;
      out.push(int(int(a*b)<0));
    }
    return out;
  }
  private static function Sqrt ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      out.push(int(Math.sqrt(in_arr[i])));
    }
    return out;
  }
  private static function Cos ( in_arr : Array ) : Array {
    var out : Array = new Array;
    for ( var i : int = 0; i != in_arr.length; ++ i ) {
      out.push(int((Math.cos(in_arr[i])*(180.0/Math.PI))));
    }
    return out;
  }
  public static function Initialize() : void {
    problem_set = new Array(
      new Problem("Addition", "Add 1 to input, send to out\n" +
                               "if in = 4, out = 5", Duplication),
      new Problem("Math Ops",    "Double input to output\n" +
                               "i: 8, o:16", Math_Ops),new Problem("Addition II",
                       "Return the total sum of inputs\n" +
                       "i:4, o:4, i:6, o:10, i:-2, o:8", Duplication_II),
      new Problem("Branching",   "If in is negative, out in-1\n" +
                  "otherwise out in+1\n" +
                   "i: -4, o:-5, i: 35, o: 36", Branching),
      new Problem("Formulas",    "Output the following formula,\n"+
                         "where 'i' denotes input\n"+
                         "i+30 - i*2 + i*6", Formulas),
      new Problem("Looping",     "Add every number from 0 ... input\n" +
                         "i: 4, o:0 + 1 + 2 + 3 + 4\n" +
                         "Guaranteed to be positive", Looping, 0, 20),
      new Problem("Negation",
                       "Force input to negative, then\n" +
                       "output it\n", Duplication_III),
      new Problem("Bit Hack",    "Out 1 if input is even, else 0\n" +
                               "i: 7, o:0\n", Bit_Hack),
      new Problem("Formulas II", "Output the following formula,\n"+
                               "where 'i' denotes input, and\n"+
                               "^ denotes pow (5^2 = 5*5 = 25)\n"+
                               "(2*i-1)^2 - (i+32)*4\n", Formulas_II),
      new Problem("Math Ops II", "Out prev input + current input\n" +
                               "i: 3, i:4, o:7, i:-2, o:2", Math_Ops_II),
      new Problem("Stack", "Given a list whose last element is\n" +
                       "zero (distinct), return the list:\n" +
                       "reversed: in(I), in(I-1) ...\n"+
                       "where I is last element (0)\n", Stacks),
      new Problem("Branching II",
                     "Receive two inputs, output highest\n" +
                     "abs value, keep the lowest. Next\n" +
                     "time keep highest and output lowest.\n" +
                     "repeat like so (low hi low hi ...)\n", Branching_II),
      new Problem("Mini Calculator",
                       "Output result of calculation\n" +
                       "First input = first operand\n" +
                       "Second input = + if 0, - if 1\n" +
                       "Third input = second operand\n", Mini_Calculator),
      new Problem("Bit Hack II", "Return negative input\n" +
                               "i:3, o:-3", Bit_Hack_II),
      new Problem("Math Ops III", "Output input * -64", Math_Ops_III),
      new Problem("Looping II",  "Output sum of all multiples of 4 but\n" +
                       "not 8 below input. i: 13 o: 4 + 12\n" +
                       "(Guaranteed to be positive)", Looping_II, 0, 500),
      new Problem("Palindrome", 
                       "1 if input is a palindrome, else 0\n" +
                       "If the number is an odd amount of\n" +
                       "digits, return 0. (you only have\n" +
                       "to find even: 2552, 55, etc)\n",
                       Palindrome, 0, 9999),
      new Problem("Fibonacci",   "Output Nth index of fibonacci\n"+
                       "sequence, where N is input\n" +
                       "(Range: 3, 30)\n"+
                       "i: 3 o: 2, i: 4 o: 3",
                       Fibonacci, 3, 30),
      new Problem("Bit Hack III", "Out IN // 3, where '//' denotes int\n" +
                      "division; digits after decimal are\n"+
                      "deprecated.\n"+
                      "6/3 = 2, 11/3 = 3", Bit_Hack_III, 0, 200),
      new Problem("Primes",
                      "Out 1 if input is prime, else 0\n"+
                      "Range: 0 - 9999 exclusive\n",
                                 Prime, 0, 9999),
      new Problem("Formulas III", "Output input*PI (3.1417)", Formulas_III),
      new Problem("Formulas IV",  "Output input*PI (3.1415926535898)\n"+
                                  "Below 250 round, after deprecate.\n",
                                  Formulas_IV,
                                  -9999, 9999),
      new Problem("Looping III", "Ouput missing elements in the list\n"+
                       "in sorted order.\n"+
                       "List terminated by a 0.\n"+
                       "I: 3 3 1 4 0 O: 2", Looping_III, 0, 18),
      new Problem("Bit Hack IV", "Inputs two integers, output the first\n"+
                       "second's lower half concatenated by\n"+
                       "first's upper half as a single int: \n"+
                       "FEDC A123, DEAD BEEF -> FEDC BEEF", Bit_Hack_IV,
        -2147483648, 2147483647)
    );
  }
}}